{"version":3,"sources":["Filter.js","services/persons.js","Notification.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","persons","search","handleDelete","people","filter","person","name","toLowerCase","includes","map","data","key","id","number","onClick","baseUrl","axios","get","then","response","newObject","post","delete","Notification","message","className","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setSearch","errorMessage","setErrorMessage","useEffect","personService","initialPersons","type","value","onChange","event","target","onSubmit","preventDefault","numberObject","length","important","Math","random","setTimeout","concat","oneName","x","alert","deletor","window","confirm","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.80619f28.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Filter = (props) => {\r\n    const {persons, search, handleDelete} = props\r\n\r\n    const filteredPersons = persons.filter(person => \r\n        person.name.toLowerCase().includes(search.toLowerCase())\r\n        )\r\n    const people = filteredPersons.map(data=> <li key={data.id}>{data.name} {data.number}\r\n        <button onClick={() => handleDelete(data.id)}>Delete</button>\r\n    </li>) \r\n        return (\r\n            <div>\r\n                {people} \r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Filter;","import axios from \"axios\";\r\nconst baseUrl = \"http://localhost:3001/persons\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then(response => response.data);\r\n};\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then(response => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject);\r\n};\r\n\r\nconst destroy = id => {\r\n  return axios.delete(`${baseUrl}/${id}`);\r\n};\r\n\r\nexport default {\r\n  getAll: getAll,\r\n  create: create,\r\n  update: update,\r\n  destroy: destroy\r\n};\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n  return <div className=\"error\">{message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useState, useEffect } from \"react\";\nimport Filter from \"./Filter\";\nimport personService from \"./services/persons\";\nimport Notification from \"./Notification\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [search, setSearch] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  useEffect(() => {\n    personService.getAll().then(initialPersons => {\n      setPersons(initialPersons);\n    });\n  }, []);\n\n  const addInfo = event => {\n    event.preventDefault();\n    const numberObject = {\n      name: newName,\n      number: newNumber,\n      id: persons.length + 1,\n      important: Math.random() > 0.5\n    };\n    setErrorMessage(`Person ${numberObject.name} was added`);\n    setTimeout(() => {\n      setErrorMessage(null);\n    }, 5000);\n\n    personService.create(numberObject).then(initialPersons => {\n      setPersons(persons.concat(initialPersons));\n      setNewName(\"\");\n      setNewNumber(\"\");\n      setSearch(\"\");\n    });\n\n    const oneName = newName;\n    const list = persons.map(x => x.name);\n\n    if (list.includes(oneName)) {\n      return alert(\"Name is already in the list\");\n    }\n    return setPersons(persons.concat(numberObject));\n  };\n\n  const handleNameChange = name => {\n    setNewName(name.target.value);\n  };\n\n  const handleNumberChange = number => {\n    setNewNumber(number.target.value);\n  };\n\n  const updateSearch = event => {\n    setSearch(event.target.value);\n  };\n\n  const handleDelete = id => {\n    const deletor = persons.filter(person => person.id !== id);\n    if (window.confirm(\"Really????\")) {\n      personService.destroy(id);\n      setPersons(deletor);\n      setErrorMessage(`Person was removed`);\n      setTimeout(() => {\n        setErrorMessage(null);\n      }, 5000);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <div>\n          Search:\n          <input type=\"text\" value={search} onChange={updateSearch} />\n        </div>\n      </div>\n      <form onSubmit={addInfo}>\n        <h4>Add new</h4>\n        <div>\n          Name:\n          <input value={newName} onChange={handleNameChange} />\n        </div>\n        <div>\n          Number:\n          <input value={newNumber} onChange={handleNumberChange} />\n        </div>\n        <div>\n          <button type=\"submit\">Add</button>\n        </div>\n      </form>\n      <h2>Names and numbers:</h2>\n      <Filter search={search} persons={persons} handleDelete={handleDelete} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}